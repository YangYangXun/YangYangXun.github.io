<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JavaScript 學習歷程 - 1.變數與型別</title>
      <link href="/2019/01/13/2019-01-13-JavaScript_1/"/>
      <url>/2019/01/13/2019-01-13-JavaScript_1/</url>
      
        <content type="html"><![CDATA[<h2 id="變數-Variable"><a href="#變數-Variable" class="headerlink" title="變數 (Variable)"></a>變數 (Variable)</h2><p>從大學時期到現在學過不少語言，變數是入門各種語言會在一開始碰到的。什麼是變數呢？<br>變數幫助我們在 coding 解問題的過程中儲存重要資訊，主要分兩種：</p><ul><li>全域變數 (Global Variable) ： 所有範圍皆能存取</li><li>區域變數 (Local Variable) ： 只有在特定範圍內有效</li></ul><h3 id="以-var-宣告變數"><a href="#以-var-宣告變數" class="headerlink" title="以 var 宣告變數"></a>以 var 宣告變數</h3><p>注意如果使用 var 宣告變數則只有在 function 中的宣告才會視為區域變數，<br>其餘如 if-else statement 及 for loop 等宣告皆會是為全域變數</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isProgrammer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全域</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isProgrammer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> var_in_if <span class="token operator">=</span> <span class="token string">'say hello in if'</span> <span class="token comment" spellcheck="true">// 全域</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Print in if statement -> '</span> <span class="token operator">+</span> var_in_for<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// say hello in if</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> var_in_for <span class="token operator">=</span> <span class="token string">'say hello in for loop'</span> <span class="token comment" spellcheck="true">// 全域</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Print in for loop -> '</span> <span class="token operator">+</span> var_in_for<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// say hello in for loop</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> var_in_function <span class="token operator">=</span> <span class="token string">'var which delcare in function '</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Print in function  -> '</span> <span class="token operator">+</span> var_in_function<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Print in global area => '</span> <span class="token operator">+</span> var_in_if<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// say hello in if</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Print in global area => '</span> <span class="token operator">+</span> var_in_for<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// say hello in for </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Print in global area => '</span> <span class="token operator">+</span> var_in_function<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ReferenceError: var_in_function is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ES6-新增-let-以及-const"><a href="#ES6-新增-let-以及-const" class="headerlink" title="ES6 新增 let 以及 const"></a>ES6 新增 let 以及 const</h3><ul><li>let 區域分明，只要在 <code>{}</code> 中宣告的變數都是區域變數，可以免污染全域變數。</li><li>const 是常數必須在宣告時給定初值，不能重新定值以及重新宣告。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// let 很適合用來當 for 迴圈變數使用</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> element <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// const 必須在宣告時給予初值</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'a'</span>a <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">// TypeError: Assignment to constant variable.</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token comment" spellcheck="true">// SyntaxError: Identifier 'a' has already been declared</span><span class="token keyword">const</span> b <span class="token comment" spellcheck="true">// SyntaxError: Missing initializer in const declaration</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="型別-Type"><a href="#型別-Type" class="headerlink" title="型別 (Type)"></a>型別 (Type)</h2><p>JavaScript 弱型別語言，他對型別要求沒有這麼嚴謹，可以在過程中一再的做型別轉換。</p><blockquote><p><em>小觀念</em>：變數其實沒有型別，因為可能在過程中不斷轉換。<strong>值</strong>才有型別。</p></blockquote><ol><li>Number</li><li>String</li><li>Boolean<br><del>4. Array</del></li><li><strong>Object</strong></li><li><strong>Null</strong></li><li><strong>Undefined</strong></li><li>Symbol (ES6)</li></ol><h3 id="使用-typeof-檢視型別"><a href="#使用-typeof-檢視型別" class="headerlink" title="使用 typeof 檢視型別"></a>使用 typeof 檢視型別</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 一些 typeof 範例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">12.34</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">0.1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">'1234'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// boolean</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// object ( JavaScript Bug )</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="null-與-undefined"><a href="#null-與-undefined" class="headerlink" title="null 與 undefined"></a>null 與 undefined</h3><ul><li>null : 空值，變數其實有被指定一個值，只不過是空值</li><li>undefined : 未定義，變數沒有被指定一個值</li></ul><p><strong>變數應避免設定為 undefined 而是 null，因為 undefine 常造成程式出錯</strong></p><p><em>Q&amp;A：如何判斷是否為 null ?</em></p><p>方法1 : 利用 falsy value</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JavaScript falsy value 有</strong></p><ul><li>NaN</li><li>0, -0</li><li>“ “ 空字串</li><li>undefined</li><li>null</li><li>false</li></ul><p>方法2 : 精確判斷可搭配 typeof </p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>！value <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 我是 null</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>我覺得 JavaScript 的執行結果有許多出乎意料之處，唯有仔細了解背後原理才不會<br>落入深坑，進入痛苦的隕石開發。</p>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vargnat 入門與簡介</title>
      <link href="/2018/12/12/2018-12-12-Vargant/"/>
      <url>/2018/12/12/2018-12-12-Vargant/</url>
      
        <content type="html"><![CDATA[<h1 id="Vagrant-入門與簡介"><a href="#Vagrant-入門與簡介" class="headerlink" title="Vagrant 入門與簡介"></a>Vagrant 入門與簡介</h1><h2 id="Vagrant-是什麼？"><a href="#Vagrant-是什麼？" class="headerlink" title="Vagrant 是什麼？"></a>Vagrant 是什麼？</h2><blockquote><p>用來建構跨平台虛擬開發環境的工具，並且提供可配置、可再生、可攜性佳的環境。</p></blockquote><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Developmant_Tools%2Fvargnat-1.png?alt=media&amp;token=558bb8b8-b991-4e72-92c2-d57557da80e9" alt=""></p><p>在部署軟體服務的階段，開發人員常常會利用虛擬主機來模擬及配置開發環境。Vagrant 就是基於這樣的需求產生的一個服務。與傳統使用 VirtualBox 透過圖形使用者介面 (Graphical User Interface, GUI) 操作虛擬主機有一點不同的是，Vagrant 主要是使用命令列介面 (command-line interface, CLI) 來與虛擬主機做溝通。因此，我們在接下來的章節中將會運用大量的命令列來進行操作。</p><p>Vagrant 的主要作用是提供一個可配置、可移植和復用的軟件環境。Vagrant 讓你通過編寫一個Vagrantfile 文件來控制虛擬機的啟動、虛擬機網絡環境的配置、虛擬機與主機間的文件共享，以及啟動後自動執行一些配置腳本，如自動執行一個Shell Script 來安裝一些必備的開發工具，如安裝配置MySQL、PHP，甚至是自動配置Nginx 站點。這意味著，在一個多人開發的項目中，你只需要同步Vagrantfile 文件，就可以保證參與項目的每個人各自的機器上擁有一致的開發環境。</p><h2 id="Vagrant-解決了甚麼問題？"><a href="#Vagrant-解決了甚麼問題？" class="headerlink" title="Vagrant 解決了甚麼問題？"></a>Vagrant 解決了甚麼問題？</h2><blockquote><p>讓 “在我的電腦上明明能跑” 這種說詞成為歷史。</p></blockquote><h2 id="Vagrant-原理"><a href="#Vagrant-原理" class="headerlink" title="Vagrant 原理"></a>Vagrant 原理</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Developmant_Tools%2Fvargant-2.png?alt=media&amp;token=5332ae1c-1159-45e5-a01a-6e0850b50f41" alt=""></p><p>我們可以通過 Vagrant 封裝一個 Linux 的開發環境分發給團隊成員。成員可以在自己喜歡的桌面系統（Mac/Windows/Linux）上開發程序，代碼卻能統一在封裝好的環境裡運行，非常威猛。</p><h2 id="Vagrant-優勢"><a href="#Vagrant-優勢" class="headerlink" title="Vagrant 優勢"></a>Vagrant 優勢</h2><ol><li>容易創建 vagrant up</li><li>方便打包分發 vargrant package</li><li>有 vagrantFile 管理開發環境</li></ol><h2 id="Vagrant-常用命令列"><a href="#Vagrant-常用命令列" class="headerlink" title="Vagrant 常用命令列"></a>Vagrant 常用命令列</h2><ol><li><p>Vagrant 版本</p><p> <code>$ vagrant version</code></p></li><li><p>初始化 Vagrant box</p><p> <code>$ vagrant init hashicorp/precise64</code></p><ul><li>初始化 Vagrantfile</li></ul></li><li><p>啟動虛擬機</p><p> <code>$ vagrant up</code></p></li><li><p>透過 SSH 登入虛擬機</p><p> <code>$ vagrant ssh</code></p></li><li><p>加入 Vagrant boxes</p><p> <code>$ vagrant box add &lt;box_name&gt; &lt;box_url&gt;</code></p></li><li><p>檢查一下目前所有安裝在本機的 Vagrant boxes</p><p> <code>$ vagrant box list</code></p></li><li><p>關機</p><p> <code>$ vagrant halt</code></p></li><li><p>如果掛載的設定有改動請使用</p><p> <code>$ vagrant reload --provision</code></p></li><li><p>查看虛擬機運行狀態</p><p> <code>$ vagrant status</code></p></li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這次會學習 Vargant 主要是因為 Laravel 的 Homestead 環境配置需要用到，未來有機會會再來補充更多。</p>]]></content>
      
      
      <categories>
          
          <category> Development Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vargant </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>入門 SourceTree</title>
      <link href="/2018/12/08/2018-12-4-Gitflow-SourceTree/"/>
      <url>/2018/12/08/2018-12-4-Gitflow-SourceTree/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近剛到職上班，公司用 SourceTree 當作 Git 圖形化工具，這邊記錄一些入門技巧。</p><h2 id="實作步驟"><a href="#實作步驟" class="headerlink" title="實作步驟"></a>實作步驟</h2><ol><li>初始環境為 Clone 下 Github 的遠端 Repo 。我的專案內只有 index.html 檔，並且有一次提交紀錄，此時 History 畫面如下。<br>可以看到目前的 Graph 有三個 Mark ，解釋如下方。 </li></ol><ul><li><code>master</code> : 主分支</li><li><code>origin/master</code> : 我們用 (遠端倉庫名)/(分支名) 這樣的形式表示遠端分支。Git 會自動為你將 Clone 位址的遠端倉庫命名為 origin，<br> 並下載其中所有的資料，建立一個指向它的 master 分支的指標。</li><li><code>origin/HEAD</code> : 用來指向目前分支的最新版本，也就是指向origin/master。</li><li><p>origin 其實就是遠端儲存庫的別名，你可以輸入 <code>git remote -v</code> 就可以看到遠端儲存庫的路徑。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep1.png?alt=media&amp;token=6f13c184-6c0f-4ffa-b1b4-5ab2c27ed145" alt=""></p></li></ul><ol start="2"><li><p>接著就來建立我們 GitFlow 大地圖的第一步，創建一個 develop 分支。上方欄 Branch 按下去，填入 Branch 名稱即可。<br><strong>細部觀察</strong>可以發現創建分支後 SourceTree 會自動幫我們跳到分支上。<br>此動作相當於<strong>指令方式</strong> <code>git branch develop</code> 建立分支。如果有勾選 <code>Checkout new branch</code> 就會在建立分支後立即跳到分之。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep2.png?alt=media&amp;token=70a4083e-f0b1-4f06-b998-59b2514e092a" alt=""></p></li><li><p>再加入兩支 feature 分支。分別是 feature/EditHomePage 以及 feature/AddAboutMe。<br>一樣可以發現圓點標記都停留在最後加入的分支上。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep3.png?alt=media&amp;token=0af6ed08-a6e8-4a72-b8b1-9fb04cd8fd1c" alt=""></p></li><li><p>回到 feature/EditHomePage 編輯 index.html 並且做一次提交。結果如下。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep4.png?alt=media&amp;token=0f2c8c4a-fc9a-4881-9232-f9ef145f173f" alt=""></p></li><li><p>如果成功完成 feature 分支任務了。我們就可以做 merge 到 develop 的動作，<strong>首先要先跳到 develop<br>分支</strong>，鼠標移動到要 merge 得分支上，右鍵選 merge 。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep5.png?alt=media&amp;token=cdb37280-189e-4860-8ad8-1a355a0958f3" alt=""></p><p>完成後如下圖。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep5-2.png?alt=media&amp;token=27a90c63-8535-44c2-9e7b-89e6388a19cb" alt=""></p></li><li><p>都沒問題後可以刪除 feature 分支，因為它已經完成階段性的任務了。同時跳到 feature/AddAboutMe 新增一支 about.html 並提交。結果如          圖。<strong>指令方式</strong>刪除分支 <code>git branch -d feature/EditHomePage</code></p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep6.png?alt=media&amp;token=f90560d1-a902-4dd7-91e3-38e9814a83e0" alt=""></p></li><li><p>一樣完成 feature 後 merge 到 develop。完成如圖。(完成就可以刪除 feature 分支)<br><strong>注意</strong>盡量不要有太多或是剩餘未 merge 的 feature 分支。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep7.png?alt=media&amp;token=096825f5-a773-4a16-90bf-8b55481032d0" alt=""></p></li></ol><ol start="8"><li><p>接下來我們要來搞一點破壞了，模擬一下開發中如果 commit 上錯誤的版本要如何撤回。<br>這邊示範如果提交兩次錯誤 commit 在未 push 到遠端 server 之前都能夠撤回。<br>直接把游標移動到想撤回的地方，右鍵 Reset develop to commit。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep8-1.png?alt=media&amp;token=79da2cc8-dec1-4e3e-ac4b-3a433647feb1" alt=""></p><p>點擊之後會有三個選項可以選擇。這裡選 Hard</p><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%2F2018-12-3-Git-With-SourceTree%2Fstep8-2.png?alt=media&amp;token=edc47583-8408-4204-9c81-3f4c43354118" alt=""></p></li></ol><ul><li><code>Soft</code> : 這個模式下的 reset，工作目錄跟暫存區的檔案都不會被丟掉，所以看起來就只有 HEAD 的移動而已。也因此，Commit 拆出來的檔案會直接放在暫存區 (Stage)。</li><li><code>Mixed</code> : 為預設模式。這個模式會把暫存區的檔案丟掉，但不會動到工作目錄的檔案，也就是說 Commit 拆出來的檔案會留在工作目錄，但不會留在暫存區 (Unstaged)。</li><li><p><code>Hard</code> : 在這個模式下，不管是工作目錄以及暫存區的檔案都會丟掉 (砍掉重練)。</p><p>撤回後圖型就回到 step7 囉！</p></li></ul><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>除了使用方便的圖形化介面，也期許自己能利用指令來做好版本控制，而不只是依賴圖形工具。</p>]]></content>
      
      
      <categories>
          
          <category> Development Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> SourceTree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Laravel Session 機制</title>
      <link href="/2018/12/02/2018-12-2-Laravel-Session/"/>
      <url>/2018/12/02/2018-12-2-Laravel-Session/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HTTP 是無狀態的，所以需要有一種能夠在請求之間紀錄狀態的法，透過這種紀錄的方法網站系統才能夠判別使用者目前狀態 ( 登入 登出 權限等…)，<br>因此 Session 就誕生拉。Session 提供了一個在多個請求之間儲存有關用戶訊息的方法，本次主要介紹 Laravel 的 Session 機制。<br>之後會再使用原生 PHP 來比較一下。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Session 的配置檔在 config / session.php 內<br>初始配置以 File 的方式來記錄 Session</p><ul><li>file- 將會話存儲在storage/framework/sessions中。</li></ul><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Laravel_Framework%2F2018-12-2-Laravel-HTTP-Session%2Fcongif_session_driver.jpg?alt=media&amp;token=55150f2e-8381-4840-94b9-0dc27c173010" alt=""></p><p>除了使用 File 方式來儲存 Session， Laravel 還提供以下幾種方式 :</p><ul><li><strong>cookie</strong> - Session 存儲在安全加密的cookie中。</li><li><strong>database</strong> - 將會話存儲在數據庫中。</li><li><strong>memcached</strong> / redis- Session 存儲在基於高速緩存的存儲系統中。</li><li><strong>array</strong> - Sessions 存儲在 PHP 數組中，但不會被持久化。</li></ul><p>這篇先介紹以 Database 方式來存 Session。之後有時間再來一一嘗試其他方法。</p><h2 id="以-Database-方式來存-Session"><a href="#以-Database-方式來存-Session" class="headerlink" title="以 Database 方式來存 Session"></a>以 Database 方式來存 Session</h2><h3 id="設定資料表"><a href="#設定資料表" class="headerlink" title="設定資料表"></a>設定資料表</h3><ul><li>我們利用 Migrate 的方式來建立 sessions 資料表，Schema 如下 :</li></ul><pre class="line-numbers language-php"><code class="language-php">Schema<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'sessions'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">unsignedInteger</span><span class="token punctuation">(</span><span class="token string">'user_id'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">'ip_address'</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'user_agent'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'payload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token string">'last_activity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 artisan 命令來 migrate</li></ul><p><code>$ php artisan session:table</code></p><p><code>$ php artisan migrate</code></p><ul><li>完成後如下</li></ul><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Laravel_Framework%2F2018-12-2-Laravel-HTTP-Session%2Fsessions_table.jpg?alt=media&amp;token=8f2e5018-7ea0-47f4-90f8-1d342f2af86a" alt=""></p><p>接著下一章我們就來觀察 Session 如何記錄使用者狀態吧!</p><h2 id="使用-Session"><a href="#使用-Session" class="headerlink" title="使用 Session"></a>使用 Session</h2><h3 id="Session-存入-sessions-table-的時機"><a href="#Session-存入-sessions-table-的時機" class="headerlink" title="Session 存入 sessions table 的時機"></a>Session 存入 sessions table 的時機</h3><ul><li>當瀏覽器第一次訪問網站時 (分別用 IE 和 Chrome 請求)<blockquote><p>  可以看到下圖產生了兩個 Session</p></blockquote></li></ul><p><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Laravel_Framework%2F2018-12-2-Laravel-HTTP-Session%2Fbrowser_visit_web.PNG?alt=media&amp;token=fda207a1-0081-46d5-82e9-fcec39bacf90" alt=""></p><ul><li>透過 Laravel Auth 機制登入時</li></ul><p><strong>&gt;ToDo&lt;</strong></p><h3 id="獲取-Session"><a href="#獲取-Session" class="headerlink" title="獲取 Session"></a>獲取 Session</h3><ul><li>如果你想要获取所有的 Session 数据，可以使用 all 方法：</li></ul><pre class="line-numbers language-php"><code class="language-php"> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Result :<br><img src="https://firebasestorage.googleapis.com/v0/b/yangyangxun-4937f.appspot.com/o/Laravel_Framework%2F2018-12-2-Laravel-HTTP-Session%2Fsession_all.jpg?alt=media&amp;token=e71b7234-b7c7-406d-b394-e494313ab12e" alt=""></p><ul><li>獲取 Sessio 中部份資料</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 得到 Token</span><span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'_token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 得到上一次請求的 URL</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'_previous'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断 Session 中是否存在某个值</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 存在且不為 null 可以用 has 判斷</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 存在且其值為 null 可以用 exists 判斷</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存儲數據"><a href="#存儲數據" class="headerlink" title="存儲數據"></a>存儲數據</h3><ul><li>存入鍵值對到 Session 中有 2 種方法</li></ul><ol><li>通過請求實例</li><li>通過全局函數</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 通過請求實例</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通過全局函數</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'key'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>今天先簡單介紹，之後遇到相關問題會回來補充。</p>]]></content>
      
      
      <categories>
          
          <category> Backed-End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Laravel 表單驗證</title>
      <link href="/2018/12/01/2018-12-1-Laravel-FormVarify/"/>
      <url>/2018/12/01/2018-12-1-Laravel-FormVarify/</url>
      
        <content type="html"><![CDATA[<ul><li>在laravel中，其實可以說是有兩種方式來進行表單驗證：使用 Request 和使用 Validation 。</li><li>5.5 新增 make Rule 方式</li></ul><h2 id="Request-表單驗證"><a href="#Request-表單驗證" class="headerlink" title="Request 表單驗證"></a>Request 表單驗證</h2><ul><li>使用artisan這個工具</li></ul><p><code>php artisan make:request TestRequest</code></p><ul><li>注意細節</li></ul><ol><li>Laravel CSRF 保護，送表單需加上 @csrf </li><li>表單 action 寫法<pre class="line-numbers language-php"><code class="language-php">為路由命名 <span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">*</span> action <span class="token operator">=</span> <span class="token string">"{{ route('form.store') }}"</span> （推薦）<span class="token operator">*</span><span class="token operator">*</span>直接鏈結控制器 <span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">*</span> action <span class="token operator">=</span> <span class="token string">"{{ action('Form\FormController@store')}}"</span> <span class="token operator">*</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ul><li>File</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">TestRequest</span> <span class="token keyword">extends</span> <span class="token class-name">FormRequest</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Determine if the user is authorized to make this request.     *      * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">authorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**        authorize()可以這樣簡單地理解：我們在處理這個表單請求(通常是一個post請求)的時候是否是需要進行身份驗證，這種驗證是指：比如A發表的評論，B能不能進行編輯。如果不能，則保留返回false，如果可以，則修改返回true。那麼我們這裡的邏輯是：既然是發表文章，在我們這個站點註冊的用戶(如果開放註冊的話)都是可以發表文章的，所以我們首先修改authorize()方法，將其返回值改為：return true;。*/</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get the validation rules that apply to the request.     *     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Validation-表單驗證"><a href="#Validation-表單驗證" class="headerlink" title="Validation 表單驗證"></a>Validation 表單驗證</h2><ul><li>使用 ValidatesRequestsTrait 的 validate 方法</li></ul><pre class="line-numbers language-php"><code class="language-php"> v5<span class="token number">.6</span> <span class="token variable">$validatedData</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'title'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required|unique:posts|max:255'</span><span class="token punctuation">,</span>    <span class="token string">'body'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v5<span class="token number">.4</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token string">'title'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required|unique:posts|max:255'</span><span class="token punctuation">,</span>    <span class="token string">'body'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required'</span><span class="token punctuation">,</span>    <span class="token string">'publish_at'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'nullable|date'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果你不想要使用請求上使用 validate 方法，你可以通過 validator Validator facade 手動創建一個驗證器實例。用 Facade 上的 make 方法生成一個新的驗證器實例：</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Validator</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PostController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 保存一篇新的博客文章。     *     * @param  Request  $request     * @return Response     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 傳給 make 方法的第一個參數是要驗證的數據。第二個參數則是該數據的驗證規則。</span>        <span class="token variable">$validator</span> <span class="token operator">=</span> Validator<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>            <span class="token string">'title'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required|unique:posts|max:255'</span><span class="token punctuation">,</span>            <span class="token string">'body'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'required'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$validator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'post/create'</span><span class="token punctuation">)</span>                        <span class="token operator">-</span><span class="token operator">></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$validator</span><span class="token punctuation">)</span>                        <span class="token operator">-</span><span class="token operator">></span><span class="token function">withInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 保存文章...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可用驗證規則"><a href="#可用驗證規則" class="headerlink" title="可用驗證規則"></a>可用驗證規則</h2><ul><li><code>Unique</code> : 驗證的字段在給定的數據庫表中必須是唯一的。如果沒有指定 column ，將會使用字段本身的名稱。<pre><code>&#39;email&#39; =&gt; &#39;unique:users,email_address&#39;</code></pre></li></ul><h2 id="顯示驗證錯誤信息"><a href="#顯示驗證錯誤信息" class="headerlink" title="顯示驗證錯誤信息"></a>顯示驗證錯誤信息</h2><p>如果傳入的請求參數未通過給定的驗證規則呢？正如前面所提到的，Laravel會自動把用戶重定向到之前的位置。另外，<strong>所有的驗證錯誤信息會被自動閃存到session</strong> .</p><p>重申一次，我們不必在GET路由中將錯誤消息顯式綁定到視圖。<strong>因為Lavarel會檢查在Session數據中的錯誤信息，並自動將其綁定到視圖</strong>（如果這個視圖文件存在）。而其中的變量 $errors 是Illuminate\Support\MessageBag 的一個實例。</p><h2 id="處理錯誤消息"><a href="#處理錯誤消息" class="headerlink" title="處理錯誤消息"></a>處理錯誤消息</h2>]]></content>
      
      
      <categories>
          
          <category> Backed-End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/12/01/hello-world/"/>
      <url>/2018/12/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
